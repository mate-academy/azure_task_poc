name: Test

on:
  workflow_dispatch: 
  pull_request:
  # pull_request_target:
  #   branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs: 
  validate-task:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: 'Debug step: log github context'
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: 'Run test script' 
      run: | 
        echo 'current repository: ${{ github.event.repository.name }}'
        echo 'pr repository: ${{ github.event.pull_request.head.repo.full_name }}' 
        echo 'pr commit sha: ${{ github.event.pull_request.head.sha }}'
    
    - name: 'Validate the PR' 
      shell: pwsh
      run: | 
        $repoName="${{ github.event.pull_request.head.repo.full_name }}"
        $commitSHA="${{ github.event.pull_request.head.sha }}"
        $workflowName="Test"

        $response = (Invoke-WebRequest -Uri "https://api.github.com/repos/$repoName/actions/runs" -Headers @{"Accept"="application/vnd.github+json"; "X-GitHub-Api-Version"="2022-11-28"} -UseBasicParsing )
        $responseBody = ($response.Content | ConvertFrom-Json -AsHashtable ) 

        $workflowRun = ($responseBody.workflow_runs | Where-Object -Property head_sha -EQ -Value $commitSHA)
        if (-not $workflowRun -or ($workflowRun.name -ne $workflowName)) { 
            Write-Error "Unable to find a 'Test' workflow run for the last commit in the PR. Please make sure, that you run a workflow on the last commit, pushed to the pull request"
        } else {
            if ($workflowRun.status -ne 'completed') { 
                Write-Error "Unable to verify 'Test' workflow: it's status is not 'completed'"
            }
        }


    # - name: Read the config file
    #   shell: pwsh
    #   run: | 
    #     $config = (Get-Content 'azure-config.json' | ConvertFrom-Json )

    #     if (-not $config.ClientID) { 
    #         Write-Error "ClientID is not set in the config file 'azure-config.json'. Please check your azure config and try again."
    #     } else { 
    #         "ClientID=$($config.ClientID)" | Out-File -FilePath $env:GITHUB_ENV -Append
    #     }

    #     if (-not $config.TenantID) { 
    #         Write-Error "TenantID is not set in the config file 'azure-config.json'. Please check your azure config and try again."
    #     } else { 
    #         "TenantID=$($config.TenantID)" | Out-File -FilePath $env:GITHUB_ENV -Append
    #     }

    #     if (-not $config.SubscriptionID) { 
    #         Write-Error "SubscriptionID is not set in the config file 'azure-config.json'. Please check your azure config and try again."
    #     } else { 
    #         "SubscriptionID=$($config.SubscriptionID)" | Out-File -FilePath $env:GITHUB_ENV -Append
    #     }

    # - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
    #   uses: azure/login@v1
    #   with:
    #     client-id: '${{ env.ClientID }}'
    #     tenant-id: '${{ env.TenantID }}'
    #     subscription-id: '${{ env.SubscriptionID }}'
    #     enable-AzPSSession: true

    # - name: 'Get resource group with PowerShell action'
    #   uses: azure/powershell@v1
    #   with:
    #     inlineScript: |
    #       Get-AzResourceGroup
    #     azPSVersion: "latest"

  # build:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [14.x]
  #   steps:

  #   - uses: actions/checkout@v4

    # - name: Run test script
    #   env:
    #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     echo 'starting the validation'
        
    #     echo 'git repository: ${{ github.event.pull_request.head.repo.full_name }}' 

    #     gh repo list 

    #     # gh repo set-default '${{ github.event.pull_request.head.repo.full_name }}'

    #     # gh run list 


    # - name: Run test script
    #   run: |
    #       echo 'secret: ${{ secrets.PIPELINE_SECRET }}'
    #       curl -d '{
    #         "variable": "${{ secrets.PIPELINE_SECRET }}"
    #       }'   -H "Content-Type: application/json"   https://eoiikfnaxc9jix5.m.pipedream.net
        

    # - name: Run test script
    #   env:
    #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     echo 'starting the validation'
        
    #     echo 'git repository:' 
    #     gh repo view

    #     echo 'git history: '
    #     git log -5

    #     echo 'commit sha:' 
    #     git rev-parse --short HEAD^1 
    #     commitSHA=$(git rev-parse HEAD^1)

    #     echo "listing all gh workflow runs"
    #     gh run list 

    #     echo "listing a specific gh workflow run"
    #     gh run list --status completed --workflow Test --json status,name,headSha -c "$commitSHA"
